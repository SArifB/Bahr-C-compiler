# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Variables
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_C_STANDARD 23)

project(Bahr
	LANGUAGES
		C
)

# Target: bahr-cli
set(bahr-cli_SOURCES
	cmake.toml
	"src/cli/inputfile.c"
	"src/cli/main.c"
)

add_executable(bahr-cli)

target_sources(bahr-cli PRIVATE ${bahr-cli_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bahr-cli_SOURCES})

target_compile_options(bahr-cli PRIVATE
	-Wall
	-Werror
	-Wextra
	-Wpedantic
)

target_include_directories(bahr-cli PRIVATE
	src
)

target_link_libraries(bahr-cli PRIVATE
	utility
	jemalloc
)

target_link_options(bahr-cli PRIVATE
	-fuse-ld=mold
)

target_link_libraries(bahr-cli PRIVATE
	bahr-codegen-llvm
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT bahr-cli)
endif()

# Target: bahr-codegen-llvm
set(bahr-codegen-llvm_SOURCES
	cmake.toml
	"src/codegen-llvm/mod.c"
)

add_library(bahr-codegen-llvm STATIC)

target_sources(bahr-codegen-llvm PRIVATE ${bahr-codegen-llvm_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bahr-codegen-llvm_SOURCES})

target_compile_options(bahr-codegen-llvm PUBLIC
	-Wall
	-Werror
	-Wextra
	-Wpedantic
)

target_include_directories(bahr-codegen-llvm PUBLIC
	src
)

target_link_libraries(bahr-codegen-llvm PUBLIC
	utility
	jemalloc
)

target_link_options(bahr-codegen-llvm PUBLIC
	-fuse-ld=mold
)

target_link_libraries(bahr-codegen-llvm PUBLIC
	parser
	LLVM
)

# Target: parser
set(parser_SOURCES
	cmake.toml
	"src/parser/ctors.c"
	"src/parser/lexer.c"
	"src/parser/mod.c"
	"src/parser/print.c"
)

add_library(parser STATIC)

target_sources(parser PRIVATE ${parser_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${parser_SOURCES})

target_compile_options(parser PUBLIC
	-Wall
	-Werror
	-Wextra
	-Wpedantic
)

target_include_directories(parser PUBLIC
	src
)

target_link_libraries(parser PUBLIC
	utility
	jemalloc
)

target_link_options(parser PUBLIC
	-fuse-ld=mold
)

target_link_libraries(parser PUBLIC
	arena
	hashmap
)

# Target: arena
set(arena_SOURCES
	cmake.toml
	"src/arena/mod.c"
)

add_library(arena STATIC)

target_sources(arena PRIVATE ${arena_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${arena_SOURCES})

target_compile_options(arena PUBLIC
	-Wall
	-Werror
	-Wextra
	-Wpedantic
)

target_include_directories(arena PUBLIC
	src
)

target_link_libraries(arena PUBLIC
	utility
	jemalloc
)

target_link_options(arena PUBLIC
	-fuse-ld=mold
)

# Target: hashmap
set(hashmap_SOURCES
	cmake.toml
	"src/hashmap/mod.c"
)

add_library(hashmap STATIC)

target_sources(hashmap PRIVATE ${hashmap_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${hashmap_SOURCES})

target_compile_options(hashmap PUBLIC
	-Wall
	-Werror
	-Wextra
	-Wpedantic
)

target_include_directories(hashmap PUBLIC
	src
)

target_link_libraries(hashmap PUBLIC
	utility
	jemalloc
)

target_link_options(hashmap PUBLIC
	-fuse-ld=mold
)

# Target: utility
set(utility_SOURCES
	cmake.toml
	"src/utility/mod.h"
	"src/utility/vec.h"
)

add_library(utility INTERFACE)

target_sources(utility INTERFACE ${utility_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${utility_SOURCES})

target_compile_options(utility INTERFACE
	-Wall
	-Werror
	-Wextra
	-Wpedantic
)

target_include_directories(utility INTERFACE
	src
)
