# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(comp-test3
	LANGUAGES
		C
)

# Target: bin
set(bin_SOURCES
	"./src/bin/main.c"
	cmake.toml
)

add_executable(bin)

target_sources(bin PRIVATE ${bin_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bin_SOURCES})

target_compile_options(bin PRIVATE
	-Wall
	-Werror
	-Wextra
	-std=c2x
)

target_include_directories(bin PRIVATE
	src
)

target_link_libraries(bin PRIVATE
	utility
)

target_link_libraries(bin PRIVATE
	lexer
	parser
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT bin)
endif()

# Target: codegen
set(codegen_SOURCES
	"./src/codegen/mod.c"
	cmake.toml
)

add_library(codegen STATIC)

target_sources(codegen PRIVATE ${codegen_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${codegen_SOURCES})

target_compile_options(codegen PUBLIC
	-Wall
	-Werror
	-Wextra
	-std=c2x
)

target_include_directories(codegen PUBLIC
	src
)

target_link_libraries(codegen PUBLIC
	utility
)

target_link_libraries(codegen PUBLIC
	LLVM
)

# Target: engine
set(engine_SOURCES
	"./src/engine/mod.c"
	cmake.toml
)

add_library(engine STATIC)

target_sources(engine PRIVATE ${engine_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${engine_SOURCES})

target_compile_options(engine PUBLIC
	-Wall
	-Werror
	-Wextra
	-std=c2x
)

target_include_directories(engine PUBLIC
	src
)

target_link_libraries(engine PUBLIC
	utility
)

target_link_libraries(engine PUBLIC
	LLVM
)

# Target: lexer
set(lexer_SOURCES
	"./src/lexer/mod.c"
	cmake.toml
)

add_library(lexer STATIC)

target_sources(lexer PRIVATE ${lexer_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${lexer_SOURCES})

target_compile_options(lexer PUBLIC
	-Wall
	-Werror
	-Wextra
	-std=c2x
)

target_include_directories(lexer PUBLIC
	src
)

target_link_libraries(lexer PUBLIC
	utility
)

# Target: parser
set(parser_SOURCES
	"./src/parser/mod.c"
	cmake.toml
)

add_library(parser STATIC)

target_sources(parser PRIVATE ${parser_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${parser_SOURCES})

target_compile_options(parser PUBLIC
	-Wall
	-Werror
	-Wextra
	-std=c2x
)

target_include_directories(parser PUBLIC
	src
)

target_link_libraries(parser PUBLIC
	utility
)

target_link_libraries(parser PUBLIC
	lexer
	arena
)

# Target: arena
set(arena_SOURCES
	"./src/arena/mod.c"
	cmake.toml
)

add_library(arena STATIC)

target_sources(arena PRIVATE ${arena_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${arena_SOURCES})

target_compile_options(arena PUBLIC
	-Wall
	-Werror
	-Wextra
	-std=c2x
)

target_include_directories(arena PUBLIC
	src
)

target_link_libraries(arena PUBLIC
	utility
)

# Target: utility
set(utility_SOURCES
	"./src/utility/mod.h"
	"./src/utility/vec.h"
	cmake.toml
)

add_library(utility INTERFACE)

target_sources(utility INTERFACE ${utility_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${utility_SOURCES})

target_compile_options(utility INTERFACE
	-Wall
	-Werror
	-Wextra
	-std=c2x
)

target_include_directories(utility INTERFACE
	src
)

